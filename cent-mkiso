#!/bin/sh

usage="usage: $0 [-u]"

arch=x86_64
mirror=http://centos.s.uw.edu/centos/7/isos/
install_type=NetInstall
readme=0_README.txt
sumfile=sha256sum.txt

tmp_dir="./new_iso"
iso_dir="$(mktemp -d)"

mkdir $tmp_dir

warn() {
    echo "$@" >&2
}

die() {
    status=$1
    shift
    warn "$@"
    exit $status
}

get_current_iso_name() {
    iso="$(curl "$mirror/$arch/$readme" | grep "CentOS-7-$arch-$install_type")"
}

fetch_iso() {
    test -f $iso && return
    curl -O $mirror/$arch/$iso
    curl -O $mirror/$arch/$sumfile
    grep "$iso" $sumfile | sha256sum -c - || die 8 "$iso download incorrect"
}

replace_config() {
    if [ "$usb" ]; then
        sed 's/ks=cdrom:/ks=hd:LABEL='"$volume"':/' "$config" >"$tmp_dir/isolinux/isolinux.cfg"
    else
        cp "$config" "$tmp_dir/isolinux/"
    fi
}

create_local_kickstart() {
	rm -f "$tmp_dir/ks.cfg"

    if [ "$set_root" ]; then
        python3 <<-ROOT >>"$tmp_dir/ks.cfg"
		import crypt,getpass
		pw = getpass.getpass("root password: ")
		crypted = crypt.crypt(pw)
		rootstring = "rootpw --iscrypted {pw}".format(pw=crypted)
		print(rootstring)
		ROOT
    fi
    if [ "$set_user" ]; then
        python3 <<-USER >>"$tmp_dir/ks.cfg"
		import crypt,getpass
		full = getpass.getpass("user full name: ")
		user = getpass.getpass("user name: ")
		pw = getpass.getpass("user password: ")
		crypted = crypt.crypt(pw)
		userstring = "user --groups=wheel --name={user} --password={pw} --iscrypted --gecos={full}".format(
		  user=user,
		  pw=crypted,
		  full=full
		  )
		print(userstring)
		USER
    fi

    if [ -n "$hostname" ]; then
        printf 'network --bootproto=dhcp --hostname=%s --noipv6 --activate\n' "$hostname" >>"$tmp_dir/ks.cfg"
    fi

    awk '{ print }
         /^%post/ {
             while ((getline < "'"$post_insert"'") > 0)
                 { print }
         }
         /^%packages/ {
             while ((getline < "'"$packages_insert"'") > 0)
                 { print }
         }
         /^%addon/ {
             while ((getline < "'"$addon_insert"'") > 0)
                 { print }
         }
         ' "$kickstart" >>"$tmp_dir/ks.cfg"
}

prepare_for_usb() {
    isohybrid "$volume".iso
}

kickstart=kickstart.ks
config="$PWD/iso/isolinux/isolinux.cfg"
volume=centos

while [ $# -gt 0 ]; do
    case $1 in
        -u)
          usb=true
          shift
          ;;
        -k)
          kickstart="$2"
          shift 2
          ;;
        -v)
          volume="$2"
          shift 2
          ;;
        -c)
          config="$2"
          shift 2
          ;;
        --hostname)
          hostname="$2"
          shift 2
          ;;
        --set-root-pass)
          set_root=true
          shift
          ;;
        --set-user)
          set_user=true
          shift
          ;;
        --post-insert)
          post_insert="$2"
          shift 2
          ;;
        --packages-insert)
          packages_insert="$2"
          shift 2
          ;;
        --addons-insert)
          addons_insert="$2"
          shift 2
          ;;
        *)
          die 1 "$usage"
          ;;
    esac
done

mkdir -p "$iso_dir" || die 2 "Can't make $iso_dir"

get_current_iso_name
fetch_iso

mount -t iso9660 -o loop "$iso" "$iso_dir"

cp -a $iso_dir/* "$tmp_dir"
umount "$iso"

replace_config
create_local_kickstart

mkisofs -V "$volume"  -o "$volume".iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -R -J -v -T "$tmp_dir/"

test "$usb" && prepare_for_usb

#FIXME 
# consider:
#implantisomd5 $volume.iso
test "$usb" && echo "sudo dd if=$volume.iso of=/dev/sdb"
